# Generated by Django 2.2.15 on 2020-11-09 20:43

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_fsm
import simple_history.models
import uuid, os, sys
from corere.main.gitlab import gitlab_create_user


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    #When we upgrade to Django 3.0, we can remove this and use noinput admin command
    #https://docs.djangoproject.com/en/3.0/ref/django-admin/#createsuperuser
    def generate_superuser(apps, schema_editor):
        if('test' not in sys.argv): #TODO: this is maybe not the cleanest way to detect a test, reprocussions are low though
            from django.contrib.auth import get_user_model

            User = get_user_model()

            DJANGO_SU_NAME = os.environ.get('DJANGO_SUPERUSER_USERNAME')
            DJANGO_SU_EMAIL = os.environ.get('DJANGO_SUPERUSER_EMAIL')
            DJANGO_SU_PASSWORD = os.environ.get('DJANGO_SUPERUSER_PASSWORD')

            superuser = User.objects.create_superuser(
                username=DJANGO_SU_NAME,
                email=DJANGO_SU_EMAIL,
                password=DJANGO_SU_PASSWORD)

            #TODO: Pass in gitlab id here?

            superuser.save()
            gitlab_create_user(superuser, is_admin=True)

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('invite_key', models.CharField(blank=True, max_length=64)),
                ('gitlab_id', models.IntegerField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('invited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Curation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date model was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date model was last updated', verbose_name='updated at')),
                ('_status', django_fsm.FSMField(choices=[('new', 'New'), ('incom_materials', 'Incomplete Materials'), ('major_issues', 'Major Issues'), ('minor_issues', 'Minor Issues'), ('no_issues', 'No Issues')], default='new', help_text='Was the submission approved by the curator', max_length=15, verbose_name='curation')),
                ('creator', models.ForeignKey(blank=True, help_text='User who created this model', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator_curations', to=settings.AUTH_USER_MODEL, verbose_name='Creator User')),
                ('last_editor', models.ForeignKey(blank=True, help_text='User who last edited this model', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_editor_curations', to=settings.AUTH_USER_MODEL, verbose_name='Last Updating User')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Edition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date model was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date model was last updated', verbose_name='updated at')),
                ('_status', django_fsm.FSMField(choices=[('new', 'New'), ('issues', 'Issues'), ('no_issues', 'No Issues')], default='new', help_text='Was the submission approved by the editor', max_length=15, verbose_name='editor approval')),
                ('creator', models.ForeignKey(blank=True, help_text='User who created this model', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator_editions', to=settings.AUTH_USER_MODEL, verbose_name='Creator User')),
                ('last_editor', models.ForeignKey(blank=True, help_text='User who last edited this model', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_editor_editions', to=settings.AUTH_USER_MODEL, verbose_name='Last Updating User')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='GitlabFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date model was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date model was last updated', verbose_name='updated at')),
                ('gitlab_blob_id', models.CharField(max_length=40)),
                ('gitlab_sha256', models.CharField(help_text='Generated cryptographic hash of the file contents. Used to tell if a file has changed between versions.', max_length=64, verbose_name='SHA-256')),
                ('gitlab_path', models.CharField(blank=True, help_text='The path to the file', max_length=4096, null=True, verbose_name='file path')),
                ('gitlab_date', models.DateTimeField(verbose_name='file creation date')),
                ('gitlab_size', models.IntegerField(help_text='The size of the file in bytes', verbose_name='file size')),
                ('tag', models.CharField(choices=[('code', 'code'), ('data', 'data'), ('documentation', 'documentation')], max_length=14, verbose_name='file type')),
                ('description', models.CharField(default='', max_length=1024, verbose_name='file description')),
                ('creator', models.ForeignKey(blank=True, help_text='User who created this model', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator_gitlabfiles', to=settings.AUTH_USER_MODEL, verbose_name='Creator User')),
                ('last_editor', models.ForeignKey(blank=True, help_text='User who last edited this model', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_editor_gitlabfiles', to=settings.AUTH_USER_MODEL, verbose_name='Last Updating User')),
            ],
        ),
        migrations.CreateModel(
            name='Manuscript',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date model was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date model was last updated', verbose_name='updated at')),
                ('title', models.CharField(default='', help_text='Title of the manuscript', max_length=200, verbose_name='manuscript title')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('pub_id', models.CharField(db_index=True, default='', help_text='The internal ID from the publication', max_length=200, verbose_name='Publication ID')),
                ('qual_analysis', models.BooleanField(default=False, help_text='Whether this manuscript needs qualitative analysis', verbose_name='qualitative analysis')),
                ('qdr_review', models.CharField(default='', help_text='Details about the review performed by QDR', max_length=1024, verbose_name='QDR Review Info')),
                ('contact_first_name', models.CharField(blank=True, help_text='First name of the publication contact that will be stored in Dataverse', max_length=150, verbose_name='contact first name')),
                ('contact_last_name', models.CharField(blank=True, help_text='Last name of the publication contact that will be stored in Dataverse', max_length=150, verbose_name='contact last name')),
                ('contact_email', models.EmailField(blank=True, help_text='Email address of the publication contact that will be stored in Dataverse', max_length=254, verbose_name='contact email address')),
                ('description', models.CharField(default='', help_text='Additional info about the manuscript', max_length=1024, verbose_name='description')),
                ('subject', models.CharField(choices=[('agricultural', 'Agricultural Sciences'), ('arts', 'Arts and Humanities'), ('astronomy', 'Astronomy and Astrophysics'), ('business', 'Business and Management'), ('chemistry', 'Chemistry'), ('computer', 'Computer and Information Science'), ('environmental', 'Earth and Environmental Sciences'), ('engineering', 'Engineering'), ('law', 'Law'), ('mathematics', 'Mathematical Sciences'), ('health', 'Medicine, Health and Life Sciences'), ('physics', 'Physics'), ('social', 'Social Sciences'), ('other', 'Other')], max_length=14, verbose_name='subject')),
                ('producer_first_name', models.CharField(max_length=150, verbose_name='producer first name')),
                ('producer_last_name', models.CharField(max_length=150, verbose_name='producer last name')),
                ('gitlab_submissions_id', models.IntegerField(blank=True, null=True)),
                ('gitlab_submissions_path', models.CharField(blank=True, max_length=255, null=True)),
                ('gitlab_manuscript_id', models.IntegerField(blank=True, null=True)),
                ('gitlab_manuscript_path', models.CharField(blank=True, max_length=255, null=True)),
                ('_status', django_fsm.FSMField(choices=[('new', 'New'), ('awaiting_init', 'Awaiting Initial Submission'), ('awaiting_resub', 'Awaiting Resubmission'), ('reviewing', 'Reviewing Submission'), ('processing', 'Processing Submission'), ('completed', 'Completed')], default='new', help_text='The overall status of the manuscript in the review process', max_length=15, verbose_name='manuscript status')),
                ('creator', models.ForeignKey(blank=True, help_text='User who created this model', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator_manuscripts', to=settings.AUTH_USER_MODEL, verbose_name='Creator User')),
                ('last_editor', models.ForeignKey(blank=True, help_text='User who last edited this model', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_editor_manuscripts', to=settings.AUTH_USER_MODEL, verbose_name='Last Updating User')),
            ],
            options={
                'permissions': [('add_authors_on_manuscript', 'Can manage authors on manuscript'), ('remove_authors_on_manuscript', 'Can manage authors on manuscript'), ('manage_editors_on_manuscript', 'Can manage editors on manuscript'), ('manage_curators_on_manuscript', 'Can manage curators on manuscript'), ('manage_verifiers_on_manuscript', 'Can manage verifiers on manuscript'), ('add_submission_to_manuscript', 'Can add submission to manuscript'), ('approve_manuscript', 'Can review submissions for processing'), ('curate_manuscript', 'Can curate manuscript/submission'), ('verify_manuscript', 'Can verify manuscript/submission')],
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date model was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date model was last updated', verbose_name='updated at')),
                ('_status', django_fsm.FSMField(choices=[('new', 'New'), ('in_progress_edition', 'In Progress - Edition'), ('in_progress_curation', 'In Progress - Curation'), ('in_progress_verification', 'In Progress - Verification'), ('reviewed_awaiting_report', 'Reviewed - Awaiting Report'), ('reviewed_awaiting_approve', 'Reviewed - Report Awaiting Approval'), ('returned', 'Returned')], default='new', help_text='The status of the submission in the review process', max_length=25, verbose_name='Submission review status')),
                ('version', models.IntegerField(verbose_name='Version number')),
                ('creator', models.ForeignKey(blank=True, help_text='User who created this model', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator_submissions', to=settings.AUTH_USER_MODEL, verbose_name='Creator User')),
                ('last_editor', models.ForeignKey(blank=True, help_text='User who last edited this model', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_editor_submissions', to=settings.AUTH_USER_MODEL, verbose_name='Last Updating User')),
                ('manuscript', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscript_submissions', to='main.Manuscript')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Verification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date model was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date model was last updated', verbose_name='updated at')),
                ('_status', django_fsm.FSMField(choices=[('new', 'New'), ('not_attempted', 'Not Attempted'), ('minor_issues', 'Minor Issues'), ('major_issues', 'Major Issues'), ('success_w_mod', 'Success with Modification'), ('success', 'Success')], default='new', help_text='Was the submission able to be verified', max_length=15, verbose_name='verification status')),
                ('creator', models.ForeignKey(blank=True, help_text='User who created this model', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator_verifications', to=settings.AUTH_USER_MODEL, verbose_name='Creator User')),
                ('last_editor', models.ForeignKey(blank=True, help_text='User who last edited this model', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_editor_verifications', to=settings.AUTH_USER_MODEL, verbose_name='Last Updating User')),
                ('manuscript', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscript_verification', to='main.Manuscript')),
                ('submission', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='submission_verification', to='main.Submission')),
            ],
            options={
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date model was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date model was last updated', verbose_name='updated at')),
                ('text', models.TextField(blank=True, default='', verbose_name='note text')),
                ('creator', models.ForeignKey(blank=True, help_text='User who created this model', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creator_notes', to=settings.AUTH_USER_MODEL, verbose_name='Creator User')),
                ('last_editor', models.ForeignKey(blank=True, help_text='User who last edited this model', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_editor_notes', to=settings.AUTH_USER_MODEL, verbose_name='Last Updating User')),
                ('manuscript', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Manuscript')),
                ('note_replied_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='note_responses', to='main.Note')),
                ('parent_curation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='main.Curation')),
                ('parent_edition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='main.Edition')),
                ('parent_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='main.GitlabFile')),
                ('parent_submission', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='main.Submission')),
                ('parent_verification', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='main.Verification')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalVerification',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, help_text='Date model was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, help_text='Date model was last updated', verbose_name='updated at')),
                ('history_change_list', models.TextField(default='')),
                ('_status', django_fsm.FSMField(choices=[('new', 'New'), ('not_attempted', 'Not Attempted'), ('minor_issues', 'Minor Issues'), ('major_issues', 'Major Issues'), ('success_w_mod', 'Success with Modification'), ('success', 'Success')], default='new', help_text='Was the submission able to be verified', max_length=15, verbose_name='verification status')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, help_text='User who created this model', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator User')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('last_editor', models.ForeignKey(blank=True, db_constraint=False, help_text='User who last edited this model', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updating User')),
                ('manuscript', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='main.Manuscript')),
                ('submission', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='main.Submission')),
            ],
            options={
                'verbose_name': 'historical verification',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalUser',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(db_index=True, error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('history_change_list', models.TextField(default='')),
                ('invite_key', models.CharField(blank=True, max_length=64)),
                ('gitlab_id', models.IntegerField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('invited_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical user',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSubmission',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, help_text='Date model was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, help_text='Date model was last updated', verbose_name='updated at')),
                ('history_change_list', models.TextField(default='')),
                ('_status', django_fsm.FSMField(choices=[('new', 'New'), ('in_progress_edition', 'In Progress - Edition'), ('in_progress_curation', 'In Progress - Curation'), ('in_progress_verification', 'In Progress - Verification'), ('reviewed_awaiting_report', 'Reviewed - Awaiting Report'), ('reviewed_awaiting_approve', 'Reviewed - Report Awaiting Approval'), ('returned', 'Returned')], default='new', help_text='The status of the submission in the review process', max_length=25, verbose_name='Submission review status')),
                ('version', models.IntegerField(verbose_name='Version number')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, help_text='User who created this model', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator User')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('last_editor', models.ForeignKey(blank=True, db_constraint=False, help_text='User who last edited this model', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updating User')),
                ('manuscript', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='main.Manuscript')),
            ],
            options={
                'verbose_name': 'historical submission',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalNote',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, help_text='Date model was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, help_text='Date model was last updated', verbose_name='updated at')),
                ('history_change_list', models.TextField(default='')),
                ('text', models.TextField(blank=True, default='', verbose_name='note text')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, help_text='User who created this model', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator User')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('last_editor', models.ForeignKey(blank=True, db_constraint=False, help_text='User who last edited this model', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updating User')),
                ('manuscript', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='main.Manuscript')),
                ('note_replied_to', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='main.Note')),
                ('parent_curation', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='main.Curation')),
                ('parent_edition', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='main.Edition')),
                ('parent_file', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='main.GitlabFile')),
                ('parent_submission', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='main.Submission')),
                ('parent_verification', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='main.Verification')),
            ],
            options={
                'verbose_name': 'historical note',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalManuscript',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, help_text='Date model was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, help_text='Date model was last updated', verbose_name='updated at')),
                ('history_change_list', models.TextField(default='')),
                ('title', models.CharField(default='', help_text='Title of the manuscript', max_length=200, verbose_name='manuscript title')),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('pub_id', models.CharField(db_index=True, default='', help_text='The internal ID from the publication', max_length=200, verbose_name='Publication ID')),
                ('qual_analysis', models.BooleanField(default=False, help_text='Whether this manuscript needs qualitative analysis', verbose_name='qualitative analysis')),
                ('qdr_review', models.CharField(default='', help_text='Details about the review performed by QDR', max_length=1024, verbose_name='QDR Review Info')),
                ('contact_first_name', models.CharField(blank=True, help_text='First name of the publication contact that will be stored in Dataverse', max_length=150, verbose_name='contact first name')),
                ('contact_last_name', models.CharField(blank=True, help_text='Last name of the publication contact that will be stored in Dataverse', max_length=150, verbose_name='contact last name')),
                ('contact_email', models.EmailField(blank=True, help_text='Email address of the publication contact that will be stored in Dataverse', max_length=254, verbose_name='contact email address')),
                ('description', models.CharField(default='', help_text='Additional info about the manuscript', max_length=1024, verbose_name='description')),
                ('subject', models.CharField(choices=[('agricultural', 'Agricultural Sciences'), ('arts', 'Arts and Humanities'), ('astronomy', 'Astronomy and Astrophysics'), ('business', 'Business and Management'), ('chemistry', 'Chemistry'), ('computer', 'Computer and Information Science'), ('environmental', 'Earth and Environmental Sciences'), ('engineering', 'Engineering'), ('law', 'Law'), ('mathematics', 'Mathematical Sciences'), ('health', 'Medicine, Health and Life Sciences'), ('physics', 'Physics'), ('social', 'Social Sciences'), ('other', 'Other')], max_length=14, verbose_name='subject')),
                ('producer_first_name', models.CharField(max_length=150, verbose_name='producer first name')),
                ('producer_last_name', models.CharField(max_length=150, verbose_name='producer last name')),
                ('gitlab_submissions_id', models.IntegerField(blank=True, null=True)),
                ('gitlab_submissions_path', models.CharField(blank=True, max_length=255, null=True)),
                ('gitlab_manuscript_id', models.IntegerField(blank=True, null=True)),
                ('gitlab_manuscript_path', models.CharField(blank=True, max_length=255, null=True)),
                ('_status', django_fsm.FSMField(choices=[('new', 'New'), ('awaiting_init', 'Awaiting Initial Submission'), ('awaiting_resub', 'Awaiting Resubmission'), ('reviewing', 'Reviewing Submission'), ('processing', 'Processing Submission'), ('completed', 'Completed')], default='new', help_text='The overall status of the manuscript in the review process', max_length=15, verbose_name='manuscript status')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, help_text='User who created this model', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator User')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('last_editor', models.ForeignKey(blank=True, db_constraint=False, help_text='User who last edited this model', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updating User')),
            ],
            options={
                'verbose_name': 'historical manuscript',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalEdition',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, help_text='Date model was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, help_text='Date model was last updated', verbose_name='updated at')),
                ('history_change_list', models.TextField(default='')),
                ('_status', django_fsm.FSMField(choices=[('new', 'New'), ('issues', 'Issues'), ('no_issues', 'No Issues')], default='new', help_text='Was the submission approved by the editor', max_length=15, verbose_name='editor approval')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, help_text='User who created this model', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator User')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('last_editor', models.ForeignKey(blank=True, db_constraint=False, help_text='User who last edited this model', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updating User')),
                ('manuscript', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='main.Manuscript')),
                ('submission', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='main.Submission')),
            ],
            options={
                'verbose_name': 'historical edition',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCuration',
            fields=[
                ('id', models.IntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, help_text='Date model was created', verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, help_text='Date model was last updated', verbose_name='updated at')),
                ('history_change_list', models.TextField(default='')),
                ('_status', django_fsm.FSMField(choices=[('new', 'New'), ('incom_materials', 'Incomplete Materials'), ('major_issues', 'Major Issues'), ('minor_issues', 'Minor Issues'), ('no_issues', 'No Issues')], default='new', help_text='Was the submission approved by the curator', max_length=15, verbose_name='curation')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('creator', models.ForeignKey(blank=True, db_constraint=False, help_text='User who created this model', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Creator User')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('last_editor', models.ForeignKey(blank=True, db_constraint=False, help_text='User who last edited this model', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Last Updating User')),
                ('manuscript', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='main.Manuscript')),
                ('submission', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='main.Submission')),
            ],
            options={
                'verbose_name': 'historical curation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='gitlabfile',
            name='parent_manuscript',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='file_manuscript', to='main.Manuscript'),
        ),
        migrations.AddField(
            model_name='gitlabfile',
            name='parent_submission',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='file_submission', to='main.Submission'),
        ),
        migrations.AddField(
            model_name='edition',
            name='manuscript',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscript_edition', to='main.Manuscript'),
        ),
        migrations.AddField(
            model_name='edition',
            name='submission',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='submission_edition', to='main.Submission'),
        ),
        migrations.AddField(
            model_name='curation',
            name='manuscript',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='manuscript_curation', to='main.Manuscript'),
        ),
        migrations.AddField(
            model_name='curation',
            name='submission',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='submission_curation', to='main.Submission'),
        ),
        migrations.AddIndex(
            model_name='gitlabfile',
            index=models.Index(fields=['gitlab_blob_id', 'parent_submission'], name='main_gitlab_gitlab__a99b89_idx'),
        ),
        migrations.AddIndex(
            model_name='gitlabfile',
            index=models.Index(fields=['gitlab_path', 'parent_submission'], name='main_gitlab_gitlab__c5f97e_idx'),
        ),
        migrations.RunPython(generate_superuser),
    ]
